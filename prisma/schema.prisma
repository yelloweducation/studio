// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") // For migrations and Prisma Studio
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  passwordHash  String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  bio           String?
  avatarUrl     String?   @map("avatar_url")
  preferences   Json?
  lastLogin     DateTime? @map("last_login")
  isActive      Boolean   @default(true) @map("is_active")

  // Relations
  enrollments      Enrollment[]
  paymentSubmissions PaymentSubmission[]
  mbtiQuizResults  MbtiQuizResult[] // User can have multiple quiz results
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String?  @map("image_url")
  dataAiHint String? @map("data_ai_hint")
  iconName  String?  @map("icon_name")
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  instructor    String   // Changed: Now a simple String field
  categoryNameCache String? @map("category_name_cache")
  imageUrl      String?  @map("image_url")
  dataAiHint    String?  @map("data_ai_hint")
  price         Float?
  currency      String?  @default("USD")
  isFeatured    Boolean? @default(false) @map("is_featured")
  
  learningObjectives String[] @default([]) @map("learning_objectives")
  targetAudience     String?  @map("target_audience")
  prerequisites      String[] @default([])
  estimatedTimeToComplete String? @map("estimated_time_to_complete")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categoryId           String?
  category             Category?           @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  modules              Module[]
  quizzes              Quiz[]
  learningPathCourses  LearningPathCourse[]
  enrollments          Enrollment[]
  paymentSubmissions   PaymentSubmission[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  courseId  String   @map("course_id")
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?  @map("embed_url")
  imageUrl    String?  @map("image_url")
  order       Int      @default(0)
  moduleId    String   @map("module_id")
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id           String     @id @default(cuid())
  title        String
  quizType     QuizType   @map("quiz_type") // maps to enum defined below
  passingScore Int?       @map("passing_score")
  courseId     String     @map("course_id")
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum QuizType {
  PRACTICE
  GRADED
}

model Question {
  id              String   @id @default(cuid())
  text            String
  order           Int      @default(0)
  points          Int?
  quizId          String   @map("quiz_id")
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctOptionId String?  // ID of the correct Option
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade) // If correct option is deleted, set this to null
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Option {
  id          String   @id @default(cuid())
  text        String
  questionId  String   @map("question_id")
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  questionsCorrected Question[] @relation("CorrectOption") // Back-relation for correctOption
}

model LearningPath {
  id        String   @id @default(cuid())
  title     String
  description String @db.Text
  icon      String?  // e.g., Lucide icon name
  imageUrl  String?  @map("image_url")
  dataAiHint String? @map("data_ai_hint")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  learningPathCourses LearningPathCourse[]
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String       @map("learning_path_id")
  courseId       String       @map("course_id")
  order          Int          // Order of the course in the learning path
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([learningPathId, courseId])
  @@index([learningPathId, order])
}

model Video {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  thumbnailUrl String?  @map("thumbnail_url")
  embedUrl     String   @map("embed_url") // For YouTube/TikTok watch URL
  dataAiHint   String?  @map("data_ai_hint")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PaymentSettings {
  id                     String   @id @default("global") // Singleton
  bankName               String?  @map("bank_name")
  accountNumber          String?  @map("account_number")
  accountHolderName      String?  @map("account_holder_name")
  additionalInstructions String?  @db.Text @map("additional_instructions")
  updatedAt              DateTime @updatedAt
}

model PaymentSubmission {
  id            String                  @id @default(cuid())
  userId        String                  @map("user_id")
  courseId      String                  @map("course_id")
  amount        Float
  currency      String
  screenshotUrl String                  @map("screenshot_url") @db.Text
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime                @default(now()) @map("submitted_at")
  reviewedAt    DateTime?               @map("reviewed_at")
  adminNotes    String?                 @db.Text @map("admin_notes")
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  courseId     String   @map("course_id")
  progress     Int      @default(0) // Percentage 0-100
  enrolledDate DateTime @default(now()) @map("enrolled_date")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // Ensure a user can enroll in a course only once
}

model SitePage {
  id        String   @id @default(cuid())
  slug      String   @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json     // Flexible content structure
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MbtiQuizResult {
  id             String    @id @default(cuid())
  userId         String?   @map("user_id") // Optional, if user is logged in
  mbtiType       String    @map("mbti_type") // e.g., "INTJ"
  scoreEI_E      Int       @map("score_ei_e")
  scoreEI_I      Int       @map("score_ei_i")
  scoreSN_S      Int       @map("score_sn_s")
  scoreSN_N      Int       @map("score_sn_n")
  scoreTF_T      Int       @map("score_tf_t")
  scoreTF_F      Int       @map("score_tf_f")
  scoreJP_J      Int       @map("score_jp_j")
  scoreJP_P      Int       @map("score_jp_p")
  submittedAt    DateTime  @default(now()) @map("submitted_at")

  user           User?     @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}
