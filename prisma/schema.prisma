
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String? // Optional for cases like OAuth where name might not be immediately available
  email         String    @unique
  passwordHash  String? // Optional for passwordless (e.g. OAuth)
  role          Role      @default(STUDENT)
  bio           String?   @db.Text
  avatarUrl     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enrollments   Enrollment[]
  paymentSubmissions PaymentSubmission[]
  mbtiQuizResults MbtiQuizResult[]
  certificates Certificate[] // Added relation to Certificate
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String?
  dataAiHint  String?
  iconName    String?  // Lucide icon name
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  instructor    String
  imageUrl      String?
  dataAiHint    String?
  price         Float?
  currency      String?  @default("USD")
  isFeatured    Boolean  @default(false)
  learningObjectives String[] @default([])
  targetAudience String?
  prerequisites String[] @default([])
  estimatedTimeToComplete String?

  categoryId        String
  categoryNameCache String? // Denormalized for easier display

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category            Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  modules             Module[]
  quizzes             Quiz[]
  learningPathCourses LearningPathCourse[]
  enrollments         Enrollment[]
  paymentSubmissions  PaymentSubmission[]
  certificates        Certificate[]        // Added relation to Certificate

  @@index([categoryId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id           String    @id @default(cuid())
  title        String
  quizType     QuizType
  passingScore Int?
  courseId     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]

  @@index([courseId])
}

model Question {
  id        String  @id @default(cuid())
  text      String  @db.Text
  order     Int
  points    Int?
  quizId    String
  correctOptionId String? // Make optional; can be null if no correct option set yet

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options Option[]
  correctOption Option? @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull) // onDelete: SetNull if option is deleted

  @@index([quizId])
  @@index([correctOptionId])
}

model Option {
  id         String  @id @default(cuid())
  text       String
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  correctForQuestions Question[] @relation("CorrectOption")

  @@index([questionId])
}


model LearningPath {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  icon         String?  // Lucide icon name
  imageUrl     String?
  dataAiHint   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  learningPathCourses LearningPathCourse[]
}

model LearningPathCourse {
  learningPathId String
  courseId       String
  order          Int      // Order of the course within the learning path
  assignedAt     DateTime @default(now())

  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([learningPathId, courseId])
  @@index([courseId])
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  progress     Int      @default(0) // Percentage completion
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // A user can enroll in a course only once
  @@index([userId])
  @@index([courseId])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id            String                  @id @default(cuid())
  userId        String
  courseId      String
  amount        Float
  currency      String
  screenshotUrl String
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime                @default(now())
  reviewedAt    DateTime?
  adminNotes    String?                 @db.Text
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade) // Consider onDelete behavior if courses can be deleted

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model PaymentSettings {
  id                      String    @id @default("global") // Singleton ID
  bankName                String?
  accountNumber           String?
  accountHolderName       String?
  additionalInstructions  String?   @db.Text
  updatedAt               DateTime  @updatedAt
}

model SitePage {
  id        String        @id @default(cuid())
  slug      String        @unique // e.g., 'about-us', 'privacy-policy'
  title     String
  content   Json // Can store HTML string, or structured JSON for more complex content
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model MbtiQuizResult {
  id String @id @default(cuid())
  userId String? // Optional, for anonymous submissions
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  mbtiType String // e.g. "INTJ", "ESFP"
  
  scoreEI_E Int @default(0) // Score for Extroversion
  scoreEI_I Int @default(0) // Score for Introversion
  scoreSN_S Int @default(0) // Score for Sensing
  scoreSN_N Int @default(0) // Score for Intuition
  scoreTF_T Int @default(0) // Score for Thinking
  scoreTF_F Int @default(0) // Score for Feeling
  scoreJP_J Int @default(0) // Score for Judging
  scoreJP_P Int @default(0) // Score for Perceiving

  submittedAt DateTime @default(now())

  @@index([userId])
  @@index([mbtiType])
}

model Certificate {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  userName    String   // Denormalized for easy display
  courseTitle String   // Denormalized for easy display
  issueDate   DateTime @default(now())
  certificateUrl String? // Placeholder for a URL to the actual certificate if generated

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId]) // A user gets one certificate per course
  @@index([userId])
  @@index([courseId])
}
