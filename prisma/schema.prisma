// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") // For Prisma Migrate and introspection
}

model Category {
  id           String    @id @default(cuid())
  name         String    @unique
  imageUrl     String?
  dataAiHint   String?
  iconName     String?
  courses      Course[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Course {
  id                       String                 @id @default(cuid())
  title                    String
  description              String                 @db.Text
  categoryNameCache        String? // Denormalized for easier display
  instructor               String
  imageUrl                 String?
  dataAiHint               String?
  price                    Float?
  currency                 String?                @default("USD")
  isFeatured               Boolean?               @default(false)
  learningObjectives       String[]
  targetAudience           String?
  prerequisites            String[]
  estimatedTimeToComplete  String?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  categoryId               String
  category                 Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  modules                  Module[]
  quizzes                  Quiz[]
  learningPathCourses      LearningPathCourse[]
  enrollments              Enrollment[]           @relation("CourseEnrollments")
  paymentSubmissions       PaymentSubmission[]    @relation("CoursePaymentSubmissions")

  @@index([categoryId])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int      @default(0)
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([moduleId])
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id            String     @id @default(cuid())
  title         String
  quizType      QuizType   @default(PRACTICE)
  passingScore  Int?
  courseId      String
  course        Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions     Question[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([courseId])
}

model Question {
  id              String   @id @default(cuid())
  text            String   @db.Text
  order           Int      @default(0)
  points          Int?
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctOptionId String?
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([quizId])
}

model Option {
  id                String     @id @default(cuid())
  text              String
  questionId        String
  question          Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionsAnswered Question[] @relation("CorrectOption") // For the relation to correctOptionId
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  @@index([questionId])
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String?
  imageUrl            String?
  dataAiHint          String?
  learningPathCourses LearningPathCourse[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model LearningPathCourse {
  id              String       @id @default(cuid())
  learningPathId  String
  courseId        String
  order           Int
  learningPath    LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course          Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([learningPathId, courseId])
  @@index([learningPathId])
  @@index([courseId])
}

enum Role {
  STUDENT
  ADMIN
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  emailVerified      DateTime?
  image              String?
  passwordHash       String?
  role               Role                @default(STUDENT)
  accounts           Account[]
  sessions           Session[]
  enrollments        Enrollment[]        @relation("UserEnrollments")
  paymentSubmissions PaymentSubmission[] @relation("UserPaymentSubmissions")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  progress     Int      @default(0) // Percentage, 0-100
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  user         User     @relation("UserEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  course       Course   @relation("CourseEnrollments", fields: [courseId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id             String                  @id @default(cuid())
  userId         String
  courseId       String
  amount         Float
  currency       String
  screenshotUrl  String
  status         PaymentSubmissionStatus @default(PENDING)
  submittedAt    DateTime                @default(now())
  reviewedAt     DateTime?
  adminNotes     String?                 @db.Text
  user           User                    @relation("UserPaymentSubmissions", fields: [userId], references: [id], onDelete: Cascade)
  course         Course                  @relation("CoursePaymentSubmissions", fields: [courseId], references: [id], onDelete: Cascade)
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model PaymentSettings {
  id                     String  @id @default("global") // Ensures only one row for global settings
  bankName               String?
  accountNumber          String?
  accountHolderName      String?
  additionalInstructions String? @db.Text
  updatedAt              DateTime @updatedAt
}

model Video {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  thumbnailUrl  String?
  embedUrl      String   // Required for actual video playback
  dataAiHint    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Model for generic site pages like About Us, Privacy Policy, Terms of Service
model SitePage {
  id        String   @id @default(cuid())
  slug      String   @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Can store HTML string or structured JSON
  updatedAt DateTime @updatedAt
}
