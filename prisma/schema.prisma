// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Removed to prevent build error if DIRECT_URL is not set
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  passwordHash  String
  role          Role      @default(STUDENT)
  bio           String?   @db.Text
  avatarUrl     String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  enrollments   Enrollment[]
  paymentSubmissions PaymentSubmission[]
  certificates  Certificate[]
  mbtiResults   MbtiQuizResult[] // Relation to MBTI results
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String?
  dataAiHint  String?
  iconName    String?  // For Lucide icons
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id                      String                 @id @default(cuid())
  title                   String
  description             String                 @db.Text
  instructor              String
  imageUrl                String?
  dataAiHint              String?
  price                   Float?
  currency                String?                @default("USD")
  isFeatured              Boolean?               @default(false)
  learningObjectives      String[]               @default([])
  targetAudience          String?
  prerequisites           String[]               @default([])
  estimatedTimeToComplete String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  categoryId              String
  categoryNameCache       String? // Denormalized for easier access, updated via triggers or manually
  category                Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  modules                 Module[]
  enrollments             Enrollment[]
  paymentSubmissions      PaymentSubmission[]
  certificates            Certificate[]
  courseQuizzes           CourseQuiz[] // Many-to-many with Quiz
  learningPathCourses     LearningPathCourse[]   @relation("LearningPathToCourse")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int      @default(0)
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Option {
  id          String     @id @default(cuid())
  text        String
  questionId  String
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isCorrectFor Question[] @relation("CorrectOption") // Back-relation for the correct option
}

model Question {
  id              String   @id @default(cuid())
  text            String
  order           Int      @default(0)
  points          Int?
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctOptionId String?  @unique // ID of the correct Option, marked unique for one-to-one
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id            String       @id @default(cuid())
  title         String
  quizType      QuizType     @default(PRACTICE)
  passingScore  Int? // Percentage (0-100)
  questions     Question[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  courseQuizzes CourseQuiz[] // Many-to-many with Course
}

// Join table for Course and Quiz (Many-to-Many)
model CourseQuiz {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  order     Int      @default(0) // Optional: order of quiz within a course
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, quizId])
  @@index([quizId]) // Index for faster lookups from quiz side
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Int      @default(0) // Percentage completion
  enrolledDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id              String                  @id @default(cuid())
  userId          String
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String
  screenshotUrl   String? // Can be optional if other payment methods are added
  status          PaymentSubmissionStatus @default(PENDING)
  submittedAt     DateTime                @default(now())
  reviewedAt      DateTime?
  adminNotes      String?                 @db.Text
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
}

model PaymentSettings {
  id                      String    @id @default("global_settings") // Ensure only one row for global settings
  bankName                String?
  accountNumber           String?
  accountHolderName       String?
  additionalInstructions  String?   @db.Text
  updatedAt               DateTime  @updatedAt
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String? // Lucide icon name
  imageUrl            String?
  dataAiHint          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  learningPathCourses LearningPathCourse[] @relation("LearningPathToCourse")
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation("LearningPathToCourse", fields: [courseId], references: [id], onDelete: Cascade)
  order          Int          @default(0) // Order of the course within the learning path
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([learningPathId, courseId])
  @@index([courseId]) // Added index
}

model SitePage {
  slug      String        @id // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Can store HTML string or structured JSON from a rich text editor
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Video {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  thumbnailUrl  String?
  embedUrl      String   // Actual video URL (e.g., YouTube, TikTok)
  dataAiHint    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Certificate {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issueDate       DateTime @default(now())
  certificateUrl  String?  // URL to a generated PDF or image, or an internal identifier
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Optional: Add a unique constraint if a user can only get one certificate per course
  @@unique([userId, courseId])
  @@index([courseId])
}

model MbtiQuizResult {
  id          String   @id @default(cuid())
  userId      String?  // Optional: Can be anonymous
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull) // SetNull if user is deleted
  mbtiType    String   // e.g., "INTJ", "ESFP"
  scoreEI_E   Int      @default(0) @map("score_ei_e")
  scoreEI_I   Int      @default(0) @map("score_ei_i")
  scoreSN_S   Int      @default(0) @map("score_sn_s")
  scoreSN_N   Int      @default(0) @map("score_sn_n")
  scoreTF_T   Int      @default(0) @map("score_tf_t")
  scoreTF_F   Int      @default(0) @map("score_tf_f")
  scoreJP_J   Int      @default(0) @map("score_jp_j")
  scoreJP_P   Int      @default(0) @map("score_jp_p")
  submittedAt DateTime @default(now())

  @@index([userId])
  @@index([mbtiType])
  @@index([submittedAt])
}
