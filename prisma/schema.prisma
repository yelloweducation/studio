// prisma/schema.prisma

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Used for migrations, shadows DATABASE_URL in Prisma Studio etc.
}

generator client {
  provider = "prisma-client-js"
}

// --- Authentication ---
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  avatarUrl     String?
  bio           String?   @db.Text
  role          Role      @default(STUDENT)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[] // For NextAuth.js OAuth
  sessions      Session[] // For NextAuth.js session management

  enrollments        Enrollment[]
  paymentSubmissions PaymentSubmission[]
  certificates       Certificate[]
  mbtiResults        MbtiQuizResult[]

  @@index([email])
}

enum Role {
  STUDENT
  ADMIN
}

// --- NextAuth.js specific models ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Learning Content ---
model Category {
  id         String   @id @default(cuid())
  name       String   @unique
  imageUrl   String?
  dataAiHint String?  @db.Text // For Unsplash hints
  iconName   String?  // For Lucide icon name
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  courses    Course[]

  @@index([name])
}

model Course {
  id                       String    @id @default(cuid())
  title                    String
  description              String    @db.Text
  instructor               String
  imageUrl                 String?
  dataAiHint               String?   @db.Text
  price                    Float?
  currency                 String?   @default("USD")
  isFeatured               Boolean?  @default(false)
  learningObjectives       String[]
  targetAudience           String?
  prerequisites            String[]
  estimatedTimeToComplete  String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  categoryId               String
  categoryNameCache        String? // Denormalized for easier access
  category                 Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict) // Prevent category deletion if courses exist
  modules                  Module[]
  courseQuizzes            CourseQuiz[] // Explicit join table for Course <-> Quiz
  enrollments              Enrollment[]
  paymentSubmissions       PaymentSubmission[]
  certificates             Certificate[]
  learningPathCourses      LearningPathCourse[] @relation("CourseToLearningPathCourse") // Relation to the join table LearningPathCourse

  @@index([categoryId])
  @@index([title])
  @@index([isFeatured])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

// --- Quizzes ---
model Quiz {
  id           String     @id @default(cuid())
  title        String
  quizType     QuizType   @default(PRACTICE)
  passingScore Int? // Percentage (0-100)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  questions    Question[]
  courseQuizzes CourseQuiz[] // Explicit join table for Course <-> Quiz

  @@index([title])
}

enum QuizType {
  PRACTICE
  GRADED
}

model Question {
  id              String   @id @default(cuid())
  text            String   @db.Text
  order           Int      @default(0)
  points          Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctOptionId String?  @unique // ID of the correct Option; @unique makes it one-to-one for this side
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade) // Optional if correctOptionId is null

  @@index([quizId])
}

model Option {
  id                 String    @id @default(cuid())
  text               String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  questionId         String
  question           Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  correctForQuestion Question? @relation("CorrectOption") // Back-relation for the one-to-one link

  @@index([questionId])
}

// Join table for many-to-many relationship between Course and Quiz
model CourseQuiz {
  id        String   @id @default(cuid())
  courseId  String
  quizId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  order     Int      @default(0) // Order of the quiz within the course
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, quizId])
  @@index([courseId])
  @@index([quizId])
}

// --- Learning Paths ---
model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String? // Lucide icon name
  imageUrl            String?
  dataAiHint          String?              @db.Text
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  learningPathCourses LearningPathCourse[] @relation("LearningPathToLearningPathCourse") // Relation to the join table
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation("LearningPathToLearningPathCourse", fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation("CourseToLearningPathCourse", fields: [courseId], references: [id], onDelete: Cascade)
  order          Int          @default(0) // Order of the course within the learning path
  assignedAt     DateTime     @default(now())
  updatedAt      DateTime     @updatedAt // Added for consistency

  @@unique([learningPathId, courseId])
  @@index([learningPathId])
  @@index([courseId])
}

// --- User Progress & Payments ---
model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  progress     Int      @default(0) // Percentage
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model PaymentSubmission {
  id            String                  @id @default(cuid())
  userId        String
  courseId      String
  amount        Float
  currency      String
  screenshotUrl String
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime                @default(now())
  reviewedAt    DateTime?
  adminNotes    String?                 @db.Text
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade) // Could be Restrict if submissions should outlive courses

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSettings {
  id                       String    @id @default("global") // Singleton
  bankName                 String?
  accountNumber            String?
  accountHolderName        String?
  additionalInstructions   String?   @db.Text
  updatedAt                DateTime  @updatedAt
}

// --- Certificates ---
model Certificate {
  id              String   @id @default(cuid())
  userId          String
  courseId        String
  issueDate       DateTime @default(now())
  certificateUrl  String?  // URL to the generated certificate file/page
  userName        String   // Denormalized for easy display
  courseTitle     String   // Denormalized for easy display
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
}

// --- Site Content (Simple CMS) ---
model SitePage {
  id        String        @id @default(cuid())
  slug      String        @unique // e.g., 'about-us', 'privacy-policy'
  title     String
  content   Json // Can store structured content (like from a block editor) or HTML string
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([slug])
}

// --- Personality Test Results ---
model MbtiQuizResult {
  id          String   @id @default(cuid())
  userId      String?  // Optional: if user is logged in
  mbtiType    String   // e.g., "INTJ"
  scoreEI_E   Int      // Extraversion score component
  scoreEI_I   Int      // Introversion score component
  scoreSN_S   Int      // Sensing score component
  scoreSN_N   Int      // Intuition score component
  scoreTF_T   Int      // Thinking score component
  scoreTF_F   Int      // Feeling score component
  scoreJP_J   Int      // Judging score component
  scoreJP_P   Int      // Perceiving score component
  submittedAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull) // SetNull if user is deleted

  @@index([userId])
  @@index([mbtiType])
}

// Videos are managed in localStorage, not in Prisma schema for this project setup
// However, if you decide to move them to DB, a model like this would be used:
// model Video {
//   id           String   @id @default(cuid())
//   title        String
//   description  String   @db.Text
//   thumbnailUrl String?
//   embedUrl     String   // Ensure this can handle YouTube, TikTok, Google Drive formats
//   dataAiHint   String?  @db.Text
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }
