// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Removed as per previous error resolution
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  STUDENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String? // Legacy field, use avatarUrl
  passwordHash  String?
  role          Role      @default(STUDENT)
  accounts      Account[]
  sessions      Session[]

  // New fields for user profile
  bio        String?   @db.Text
  avatarUrl  String? // URL to user's avatar image
  isActive   Boolean   @default(true) // To enable/disable user accounts
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations for learning & teaching
  enrollments        Enrollment[]
  paymentSubmissions PaymentSubmission[]
  certificates       Certificate[]
  mbtiQuizResults    MbtiQuizResult[] // One user can have multiple MBTI results over time

  @@index([email])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String?
  dataAiHint  String?  // For AI to generate better placeholder images, or for Unsplash search
  iconName    String?  // Name of a Lucide icon
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id                       String    @id @default(cuid())
  title                    String
  description              String    @db.Text
  categoryNameCache        String? // Denormalized for easier display
  instructor               String
  imageUrl                 String?
  dataAiHint               String?
  price                    Float?
  currency                 String?   @default("USD")
  isFeatured               Boolean?  @default(false)
  learningObjectives       String[]
  targetAudience           String?
  prerequisites            String[]
  estimatedTimeToComplete  String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  modules                  Module[]
  enrollments              Enrollment[]
  paymentSubmissions       PaymentSubmission[]
  certificates             Certificate[]

  // Many-to-many with Quiz through CourseQuiz
  courseQuizzes            CourseQuiz[]

  // Relation to Category
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull) // If category deleted, set course categoryId to null

  // Relation to LearningPath through LearningPathCourse
  learningPathCourses LearningPathCourse[] @relation("CourseToLearningPathCourse")

  @@index([categoryId])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int      @default(0)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int      @default(0)
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([moduleId])
}

model Quiz {
  id           String     @id @default(cuid())
  title        String
  quizType     QuizType   @default(PRACTICE) // PRACTICE or GRADED
  passingScore Int? // Percentage (0-100), only relevant for GRADED
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Many-to-many with Course through CourseQuiz
  courseQuizzes CourseQuiz[]
}

enum QuizType {
  PRACTICE
  GRADED
}

model Question {
  id              String   @id @default(cuid())
  text            String   @db.Text
  order           Int      @default(0)
  points          Int?     @default(10)
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctOptionId String?  @unique // ID of the correct Option
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([quizId])
}

model Option {
  id          String    @id @default(cuid())
  text        String
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  correctForQuestion Question? @relation("CorrectOption") // Back-relation for correctOption

  @@index([questionId])
}

// Explicit join table for Course and Quiz (Many-to-Many)
model CourseQuiz {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  order     Int      @default(0) // Order of the quiz within the course
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, quizId])
  @@index([courseId])
  @@index([quizId])
}


model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String? // Lucide icon name
  imageUrl            String?
  dataAiHint          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  learningPathCourses LearningPathCourse[] @relation("LearningPathToLearningPathCourse")
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation("LearningPathToLearningPathCourse", fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation("CourseToLearningPathCourse", fields: [courseId], references: [id], onDelete: Cascade)
  order          Int          @default(0) // Order of the course within the learning path
  assignedAt     DateTime     @default(now())
  updatedAt      DateTime     @updatedAt @default(now())


  @@unique([learningPathId, courseId])
  @@index([learningPathId])
  @@index([courseId])
}

model PaymentSettings {
  id                     String    @id @default("global") // Singleton record
  bankName               String?
  accountNumber          String?
  accountHolderName      String?
  additionalInstructions String?   @db.Text
  updatedAt              DateTime  @updatedAt
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id            String                  @id @default(cuid())
  userId        String
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId      String
  course        Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String
  screenshotUrl String
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime                @default(now())
  reviewedAt    DateTime?
  adminNotes    String?                 @db.Text
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Int      @default(0) // Percentage completion
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

// Model for dynamic site pages (e.g., About Us, Privacy Policy)
model SitePage {
  id        String   @id @default(cuid())
  slug      String   @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Can store HTML string or structured JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

// Model for short videos / reels (distinct from Lesson videos)
model Video {
  id            String    @id @default(cuid())
  title         String
  description   String    @db.Text
  thumbnailUrl  String?
  embedUrl      String    @default("https://example.com/default-video") // TikTok, YouTube, or GDrive embed URL
  dataAiHint    String?   // For AI to generate better placeholder thumbnails
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Model for Certificates
model Certificate {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issueDate       DateTime @default(now())
  certificateUrl  String?  // URL to a generated PDF or image, if applicable
  verificationCode String? @unique // Optional unique code for verification
  userName        String // Store user name at time of issuance
  courseTitle     String // Store course title at time of issuance
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([userId, courseId]) // User can only have one certificate per course
  @@index([userId])
  @@index([courseId])
}

// Model for MBTI Quiz Results
model MbtiQuizResult {
  id             String   @id @default(cuid())
  userId         String?  // Optional: if the user is logged in
  user           User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  mbtiType       String   @default("UNKNOWN") // e.g., "INFP", "ESTJ"
  // Scores for each dichotomy pair (can be positive or negative)
  scoreEI_E      Int      @default(0) // Extroversion score
  scoreEI_I      Int      @default(0) // Introversion score (often -ve of E, or calculated separately)
  scoreSN_S      Int      @default(0) // Sensing score
  scoreSN_N      Int      @default(0) // Intuition score
  scoreTF_T      Int      @default(0) // Thinking score
  scoreTF_F      Int      @default(0) // Feeling score
  scoreJP_J      Int      @default(0) // Judging score
  scoreJP_P      Int      @default(0) // Perceiving score
  submittedAt    DateTime @default(now())

  @@index([userId])
  @@index([mbtiType])
}
