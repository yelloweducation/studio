datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  passwordHash  String?
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)
  bio           String?   @db.Text
  avatarUrl     String?
  enrollments   Enrollment[]
  paymentSubmissions PaymentSubmission[]
  mbtiQuizResults MbtiQuizResult[]
  certificates Certificate[]

  @@map("users")
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String?
  dataAiHint String?
  iconName  String? // For Lucide icon name
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Course {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  instructor    String
  imageUrl      String?
  dataAiHint    String?
  price         Float?
  currency      String?  @default("USD")
  isFeatured    Boolean? @default(false)
  learningObjectives String[]
  targetAudience String?
  prerequisites String[]
  estimatedTimeToComplete String?
  categoryNameCache String? // Denormalized for easier access, set from Category name

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  modules Module[]

  enrollments Enrollment[]
  paymentSubmissions PaymentSubmission[]
  certificates Certificate[]

  // Many-to-many with Quiz
  courseQuizzes CourseQuiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int      @default(0)
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lessons")
}

// Quiz is now a standalone entity
model Quiz {
  id            String   @id @default(cuid())
  title         String
  quizType      QuizType @default(PRACTICE)
  passingScore  Int?
  questions     Question[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Many-to-many with Course
  courseQuizzes CourseQuiz[]

  @@map("quizzes")
}

// Join table for Course and Quiz
model CourseQuiz {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  order     Int?     @default(0) // Optional: if you need to order quizzes within a course
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, quizId])
  @@map("course_quizzes")
}


enum QuizType {
  PRACTICE
  GRADED
}

model Question {
  id              String   @id @default(cuid())
  text            String   @db.Text
  order           Int      @default(0)
  points          Int?
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctOptionId String?  // Nullable, as it references an Option's ID
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("questions")
}

model Option {
  id          String   @id @default(cuid())
  text        String
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  correctForQuestion Question[] @relation("CorrectOption") // Inverse relation for correctOption

  @@map("options")
}


model LearningPath {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  icon         String?  // Lucide icon name
  imageUrl     String?
  dataAiHint   String?
  learningPathCourses LearningPathCourse[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("learning_paths")
}

model LearningPathCourse {
  id             String      @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order          Int         @default(0) // Order of the course within the learning path
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([learningPathId, courseId])
  @@map("learning_path_courses")
}


model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Int      @default(0) // Percentage, 0-100
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
  @@map("enrollments")
}

model PaymentSettings {
  id                      String   @id @default("global") // Singleton
  bankName                String?
  accountNumber           String?
  accountHolderName       String?
  additionalInstructions  String?  @db.Text
  updatedAt               DateTime @updatedAt

  @@map("payment_settings")
}

model PaymentSubmission {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String
  screenshotUrl   String
  status          PaymentSubmissionStatus @default(PENDING)
  submittedAt     DateTime @default(now())
  reviewedAt      DateTime?
  adminNotes      String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("payment_submissions")
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model SitePage {
  id        String      @id @default(cuid())
  slug      String      @unique // e.g., 'about-us', 'privacy-policy'
  title     String
  content   Json // Using Prisma.JsonValue for flexible content (HTML string or JSON object)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("site_pages")
}


model MbtiQuizResult {
  id          String   @id @default(cuid())
  userId      String?  // Optional: if the user is logged in
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  mbtiType    String   // e.g., "INFP"
  scoreEI_E   Int      @default(0) @map("score_e")
  scoreEI_I   Int      @default(0) @map("score_i")
  scoreSN_S   Int      @default(0) @map("score_s")
  scoreSN_N   Int      @default(0) @map("score_n")
  scoreTF_T   Int      @default(0) @map("score_t")
  scoreTF_F   Int      @default(0) @map("score_f")
  scoreJP_J   Int      @default(0) @map("score_j")
  scoreJP_P   Int      @default(0) @map("score_p")
  submittedAt DateTime @default(now())

  @@map("mbti_quiz_results")
}

model Certificate {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userName       String   // Denormalized for easy display
  courseTitle    String   // Denormalized for easy display
  issueDate      DateTime @default(now())
  certificateUrl String?  // URL to an externally generated certificate PDF/image

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId]) // A user gets one certificate per course
  @@map("certificates")
}
