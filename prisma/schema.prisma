// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  passwordHash   String?
  role           Role      @default(STUDENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isActive       Boolean   @default(true)
  bio            String?   @db.Text
  avatarUrl      String?
  enrollments    Enrollment[]
  paymentSubmissions PaymentSubmission[]
  certificates   Certificate[]
  mbtiQuizResults MbtiQuizResult[] // Relation to MBTI Quiz Results
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id         String   @id @default(cuid())
  name       String   @unique
  imageUrl   String?
  dataAiHint String? // For AI-assisted image searching
  iconName   String?  // Lucide icon name
  courses    Course[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Course {
  id                       String    @id @default(cuid())
  title                    String
  description              String    @db.Text
  instructor               String
  imageUrl                 String?
  dataAiHint               String? // For AI-assisted image searching for the course image
  price                    Float?
  currency                 String?
  isFeatured               Boolean?  @default(false)
  learningObjectives       String[]
  targetAudience           String?
  prerequisites            String[]
  estimatedTimeToComplete  String?
  categoryNameCache        String? // Denormalized for easier querying, matches category.name
  categoryId               String
  category                 Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  modules                  Module[]
  courseQuizzes            CourseQuiz[] @relation("CourseToQuizzes") // Relation to the join table for Quizzes
  enrollments              Enrollment[]
  paymentSubmissions       PaymentSubmission[]
  certificates             Certificate[]
  learningPathCourses      LearningPathCourse[] @relation("CourseInLearningPaths") // Relation to the join table for Learning Paths
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  duration    String?
  description String? @db.Text
  embedUrl    String? // For YouTube, TikTok, etc.
  imageUrl    String? // Fallback if no video, or supplementary image
  order       Int     @default(0)
  moduleId    String
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Option {
  id          String   @id @default(cuid())
  text        String
  questionId  String
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isCorrectForQuestion Question? @relation("CorrectOption") // One-to-one relation: an option can be the correct one for a question
}

model Question {
  id              String   @id @default(cuid())
  text            String
  order           Int      @default(0)
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  points          Int?
  correctOptionId String?  @unique // ID of the correct Option, marked unique for one-to-one
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id            String       @id @default(cuid())
  title         String
  quizType      QuizType     @default(PRACTICE)
  questions     Question[]
  passingScore  Int? // Percentage
  courseQuizzes CourseQuiz[] @relation("QuizToCourses") // Relation to the join table for Courses
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Join table for many-to-many between Course and Quiz
model CourseQuiz {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation("CourseToQuizzes", fields: [courseId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation("QuizToCourses", fields: [quizId], references: [id], onDelete: Cascade)
  order     Int      @default(0) // Order of the quiz within the course
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, quizId])
  @@index([quizId])
}


model PaymentSettings {
  id                      String    @id @default("global_settings") // Ensuring only one row for global settings
  bankName                String?
  accountNumber           String?
  accountHolderName       String?
  additionalInstructions  String?   @db.Text
  updatedAt               DateTime  @updatedAt
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id            String                  @id @default(cuid())
  userId        String
  user          User                    @relation(fields: [userId], references: [id])
  courseId      String
  course        Course                  @relation(fields: [courseId], references: [id])
  amount        Float
  currency      String
  screenshotUrl String
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime                @default(now())
  reviewedAt    DateTime?
  adminNotes    String?                 @db.Text
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id])
  progress     Int      @default(0) // Percentage 0-100
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}


model LearningPath {
  id                  String   @id @default(cuid())
  title               String
  description         String   @db.Text
  icon                String?  // Lucide icon name
  imageUrl            String?
  dataAiHint          String?  // For AI-assisted image searching
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  learningPathCourses LearningPathCourse[] @relation("LearningPathCourseEntries") // Corrected relation name
}

// Join table for many-to-many between LearningPath and Course
model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation("LearningPathCourseEntries", fields: [learningPathId], references: [id], onDelete: Cascade) // Corrected relation name
  courseId       String
  course         Course      @relation("CourseInLearningPaths", fields: [courseId], references: [id], onDelete: Cascade) // Corrected relation name
  order          Int         @default(0) // Order of the course within the learning path
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([learningPathId, courseId])
  @@index([courseId])
}


model SitePage {
  id        String        @id @default(cuid())
  slug      String        @unique // e.g., 'about-us', 'privacy-policy'
  title     String
  content   Json // Flexible content structure (e.g., HTML string, or structured JSON)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Video {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  thumbnailUrl  String?
  embedUrl      String   // YouTube, TikTok, Google Drive embeddable URL
  dataAiHint    String?  // For AI-assisted image searching for thumbnail
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Certificate {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userName       String   // Denormalized for easy display
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseTitle    String   // Denormalized for easy display
  issueDate      DateTime @default(now())
  certificateUrl String?  // URL to the generated certificate (if applicable)

  @@unique([userId, courseId]) // A user gets one certificate per course
  @@index([courseId])
}

model MbtiQuizResult {
  id          String   @id @default(cuid())
  userId      String?  // Optional: if the user is logged in
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  mbtiType    String   // e.g., "INFP"
  scoreEI_E   Int      // Score for Extraversion
  scoreEI_I   Int      // Score for Introversion
  scoreSN_S   Int      // Score for Sensing
  scoreSN_N   Int      // Score for Intuition
  scoreTF_T   Int      // Score for Thinking
  scoreTF_F   Int      // Score for Feeling
  scoreJP_J   Int      // Score for Judging
  scoreJP_P   Int      // Score for Perceiving
  submittedAt DateTime @default(now())

  @@index([userId])
  @@index([mbtiType])
}
