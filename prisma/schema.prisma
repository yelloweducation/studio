generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NETLIFY_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String? // In a real app, ensure this is securely hashed

  role Role @default(STUDENT)

  enrollments         Enrollment[]
  paymentSubmissions  PaymentSubmission[]
  // sessions      Session[]
  // accounts      Account[] // For NextAuth.js if you add it

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String   @id @default(cuid())
  name       String   @unique
  imageUrl   String?
  dataAiHint String? // For AI image generation hints
  iconName   String?  // For Lucide icon name

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id            String  @id @default(cuid())
  title         String
  description   String?
  categoryNameCache String? // Denormalized for easier querying if category relation is optional/complex
  instructor    String?
  imageUrl      String?
  dataAiHint    String?
  price         Float?
  currency      String?
  isFeatured    Boolean? @default(false)

  learningObjectives      String[]
  targetAudience          String?
  prerequisites           String[]
  estimatedTimeToComplete String?

  modules   Module[]
  quizzes   Quiz[]
  enrollments Enrollment[]
  paymentSubmissions PaymentSubmission[]
  learningPaths LearningPathCourse[] // Relation table for many-to-many

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull) // SetNull if you want courses to remain if category is deleted

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Module {
  id       String  @id @default(cuid())
  title    String
  order    Int
  courseId String
  course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  order       Int
  duration    String?
  description String?
  embedUrl    String? // For YouTube, TikTok, etc.
  imageUrl    String? // For image-based lessons or video fallback
  moduleId    String
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([moduleId])
}

model Quiz {
  id            String    @id @default(cuid())
  title         String
  quizType      QuizType  @default(PRACTICE)
  passingScore  Int?      // Optional, only relevant for GRADED quizzes

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  questions Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Question {
  id        String   @id @default(cuid())
  text      String
  order     Int
  points    Int?
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   Option[]

  correctOptionId String? // ID of the correct option
  correctOption   Option?   @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull)
  // onDelete: SetNull means if the correct option is deleted, the question's correctOptionId becomes null
  // You might want Restrict if an option being correct is critical and it shouldn't be deletable independently.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([quizId])
  @@index([correctOptionId])
}

model Option {
  id         String    @id @default(cuid())
  text       String
  questionId String
  question   Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  questionsWhereCorrect Question[] @relation("CorrectOption") // Inverse relation for correctOption

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([questionId])
}


model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Int      @default(0) // Percentage
  enrolledDate DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Video {
  id           String    @id @default(cuid())
  title        String
  description  String?
  thumbnailUrl String?
  embedUrl     String? // For YouTube or TikTok embeds
  dataAiHint   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentSubmission {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId      String
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String
  screenshotUrl String? // URL to the uploaded screenshot
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime @default(now())
  reviewedAt    DateTime?
  adminNotes    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
}

model PaymentSettings {
  id                    String    @id @default("global") // Singleton settings record
  bankName              String?
  accountNumber         String?
  accountHolderName     String?
  additionalInstructions String?
  updatedAt             DateTime  @updatedAt
}

model LearningPath {
  id            String    @id @default(cuid())
  title         String
  description   String?
  icon          String?   // Lucide icon name string
  courses       LearningPathCourse[] // Relation table
  imageUrl      String?
  dataAiHint    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPathCourse {
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignedAt     DateTime     @default(now())

  @@id([learningPathId, courseId])
  @@index([learningPathId])
  @@index([courseId])
}


enum Role {
  STUDENT
  ADMIN
}

enum QuizType {
  PRACTICE
  GRADED
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}
