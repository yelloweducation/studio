datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") // For Prisma Migrate, separate from connection pool
  // Optionally, if using Prisma Accelerate or Pulse:
  // relationMode = "prisma" 
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id         String   @id @default(cuid())
  name       String   @unique
  imageUrl   String?
  dataAiHint String?
  iconName   String? // For Lucide icon name
  courses    Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id         String   @id @default(cuid())
  title      String
  description String @db.Text
  imageUrl   String?
  dataAiHint String?
  price      Float?
  currency   String?  @default("USD")
  isFeatured Boolean? @default(false)

  learningObjectives Json? 
  targetAudience     String?
  prerequisites      Json? 
  estimatedTimeToComplete String?

  categoryId        String
  categoryNameCache String? 
  category          Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Changed instructor to be a simple string field
  instructor              String  // Stores the instructor's name as a string

  modules    Module[]
  quizzes    Quiz[]
  enrollments Enrollment[]
  paymentSubmissions PaymentSubmission[]
  learningPathCourses LearningPathCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  duration    String?
  description String? @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int     @default(0)
  moduleId    String
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id           String   @id @default(cuid())
  title        String
  quizType     QuizType
  passingScore Int?
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id              String   @id @default(cuid())
  text            String
  order           Int      @default(0)
  points          Int?
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[] @relation("QuestionOptions")
  correctOptionId String?  // ID of the correct Option
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id          String     @id @default(cuid())
  text        String
  questionId  String
  question    Question   @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  isCorrectIn Question[] @relation("CorrectOption") // Inverse relation for correctOption

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String?
  imageUrl            String?
  dataAiHint          String?
  learningPathCourses LearningPathCourse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LearningPathCourse {
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order          Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([learningPathId, courseId])
}

enum Role {
  STUDENT
  ADMIN
}

model User {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  passwordHash String?
  role         Role     @default(STUDENT)
  
  bio          String? @db.Text
  avatarUrl    String?
  preferences  Json?

  lastLogin    DateTime?
  isActive     Boolean?   @default(true)

  enrollments  Enrollment[]
  paymentSubmissions PaymentSubmission[]
  mbtiQuizResults MbtiQuizResult[] // User can have multiple MBTI results

  // Removed relation to Course for instructor
  // coursesAsInstructor Course[] @relation("CoursesAsInstructor") 

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Int      @default(0) // Percentage completion
  enrolledDate DateTime @default(now())
  completedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id              String                  @id @default(cuid())
  userId          String
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String
  screenshotUrl   String
  status          PaymentSubmissionStatus @default(PENDING)
  submittedAt     DateTime                @default(now())
  reviewedAt      DateTime?
  adminNotes      String?                 @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentSettings {
  id                      String  @id @default("global") // Singleton record
  bankName                String?
  accountNumber           String?
  accountHolderName       String?
  additionalInstructions  String? @db.Text
  updatedAt               DateTime @updatedAt
}

model Video {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  thumbnailUrl String?
  embedUrl     String   // YouTube or TikTok video URL/Embed URL
  dataAiHint   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MbtiQuizResult {
  id          String   @id @default(cuid())
  userId      String?  // Optional: if the user is logged in
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  mbtiType    String   // e.g., "INTJ"
  scoreEI_E   Int      // Score for Extroversion
  scoreEI_I   Int      // Score for Introversion
  scoreSN_S   Int      // Score for Sensing
  scoreSN_N   Int      // Score for Intuition
  scoreTF_T   Int      // Score for Thinking
  scoreTF_F   Int      // Score for Feeling
  scoreJP_J   Int      // Score for Judging
  scoreJP_P   Int      // Score for Perceiving
  submittedAt DateTime @default(now())

  @@index([userId])
}

model SitePage {
  slug      String    @id @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json      // Can store structured content (like an AST) or HTML string
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
