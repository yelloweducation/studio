// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Used for migrations, shadows DATABASE_URL in Prisma Studio etc. - REMOVED
}

model User {
  id            String    @id @default(cuid())
  name          String? // Made nullable to match previous states, ensure consistency
  email         String    @unique
  passwordHash  String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  bio           String?   @db.Text
  avatarUrl     String?
  isActive      Boolean   @default(true)

  // Relations
  enrollments         Enrollment[]
  paymentSubmissions  PaymentSubmission[]
  mbtiQuizResults     MbtiQuizResult[]
  certificates        Certificate[]

  @@index([email])
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String?
  dataAiHint String?
  iconName  String?  // For Lucide icon name
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  courses Course[]
}

model Course {
  id            String    @id @default(cuid())
  title         String
  description   String    @db.Text
  instructor    String
  imageUrl      String?
  dataAiHint    String?
  price         Float?
  currency      String?   @default("USD")
  isFeatured    Boolean?  @default(false)
  learningObjectives String[] @default([])
  targetAudience String?
  prerequisites String[] @default([])
  estimatedTimeToComplete String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  categoryId        String
  category          Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryNameCache String // Denormalized for easier querying

  modules       Module[]
  enrollments   Enrollment[]
  paymentSubmissions PaymentSubmission[]
  certificates  Certificate[]
  learningPathCourses LearningPathCourse[] @relation("CourseEntriesInPaths")
  courseQuizzes CourseQuiz[] // Relation to the join table CourseQuiz

  @@index([categoryId])
  @@index([title])
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons  Lesson[]

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  moduleId String
  module   Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
}

model Option {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  // Relation for correct option (back-relation)
  correctForQuestion Question? @relation("CorrectOption")


  @@index([questionId])
}

model Question {
  id        String   @id @default(cuid())
  text      String   @db.Text
  order     Int      @default(0)
  points    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quizId   String
  quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options  Option[]

  correctOptionId String?  @unique // ID of the correct Option, marked unique for one-to-one
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([quizId])
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id           String   @id @default(cuid())
  title        String
  quizType     QuizType @default(PRACTICE)
  passingScore Int?     // Percentage, e.g., 70 for 70%
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  questions Question[]
  courseQuizzes CourseQuiz[] // Relation to the join table CourseQuiz

  @@index([title])
}

// Join table for many-to-many between Course and Quiz
model CourseQuiz {
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  order     Int      @default(0) // Order of the quiz within the course

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([courseId, quizId])
  @@index([quizId])
}


model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Int      @default(0) // Percentage
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model LearningPath {
  id                  String   @id @default(cuid())
  title               String
  description         String   @db.Text
  icon                String?  // Lucide icon name
  imageUrl            String?
  dataAiHint          String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  learningPathCourses LearningPathCourse[] @relation("PathEntries")

  @@index([title])
}

model LearningPathCourse {
  learningPathId String
  learningPath   LearningPath @relation("PathEntries", fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation("CourseEntriesInPaths", fields: [courseId], references: [id], onDelete: Cascade)
  order          Int          @default(0) // Order of the course within the learning path

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([learningPathId, courseId])
  @@index([courseId])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id            String                  @id @default(cuid())
  userId        String
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId      String
  course        Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount        Float
  currency      String
  screenshotUrl String
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime                @default(now())
  reviewedAt    DateTime?
  adminNotes    String?                 @db.Text
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model PaymentSettings {
  id                      String    @id @default("global_settings") // Singleton ID
  bankName                String?
  accountNumber           String?
  accountHolderName       String?
  additionalInstructions  String?   @db.Text
  updatedAt               DateTime  @updatedAt
}

// For generic site pages like "About Us", "Privacy Policy"
model SitePage {
  slug      String        @id // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Can store HTML string or structured JSON
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([slug])
}

// For MBTI Personality Quiz Results
model MbtiQuizResult {
  id          String   @id @default(cuid())
  userId      String?  // Optional: if the user is logged in
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull) // Link to user, set null if user deleted
  mbtiType    String   // e.g., "INTJ", "ESFP"
  // Store scores for each of the 8 letters
  scoreEI_E   Int      @default(0) // Score towards E (Extraversion)
  scoreEI_I   Int      @default(0) // Score towards I (Introversion)
  scoreSN_S   Int      @default(0) // Score towards S (Sensing)
  scoreSN_N   Int      @default(0) // Score towards N (Intuition)
  scoreTF_T   Int      @default(0) // Score towards T (Thinking)
  scoreTF_F   Int      @default(0) // Score towards F (Feeling)
  scoreJP_J   Int      @default(0) // Score towards J (Judging)
  scoreJP_P   Int      @default(0) // Score towards P (Perceiving)
  submittedAt DateTime @default(now())

  @@index([userId])
  @@index([mbtiType])
}

model Certificate {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issueDate      DateTime @default(now())
  certificateUrl String?  // URL to an externally generated certificate PDF/image

  userName    String   // Denormalized user name at time of issuance
  courseTitle String   // Denormalized course title at time of issuance

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId]) // User can get only one certificate per course
  @@index([userId])
  @@index([courseId])
}
