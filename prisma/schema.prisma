// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED") // Keep this for Netlify, but ensure the env var is set. If not, Prisma might complain during migration steps.
                                          // For builds that only generate client or simple pushes, it might be okay if DATABASE_URL is direct.
                                          // A common pattern for local dev or non-Netlify is to have DATABASE_URL_UNPOOLED set to the same as DATABASE_URL if no pooling.
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  imageUrl  String?
  dataAiHint String?
  iconName  String?
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id                       String    @id @default(cuid())
  title                    String
  description              String    @db.Text
  category                 Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId               String
  categoryNameCache        String? // Denormalized for easier querying
  instructor               String
  imageUrl                 String?
  dataAiHint               String?
  price                    Float?
  currency                 String?   @default("USD")
  isFeatured               Boolean?  @default(false)
  learningObjectives       String[]
  targetAudience           String?
  prerequisites            String[]
  estimatedTimeToComplete  String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  modules                  Module[]
  quizzes                  Quiz[]
  learningPathCourses      LearningPathCourse[]
  enrollments              Enrollment[]
  paymentSubmissions       PaymentSubmission[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, order])
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  duration    String?
  description String? @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([moduleId, order])
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id           String     @id @default(cuid())
  title        String
  quizType     QuizType   @default(PRACTICE)
  passingScore Int?
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Question {
  id              String   @id @default(cuid())
  text            String
  order           Int
  points          Int?
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  options         Option[]
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull) // SetNull to avoid cycles on delete
  correctOptionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Option {
  id                 String     @id @default(cuid())
  text               String
  question           Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId         String
  correctForQuestion Question?  @relation("CorrectOption") // Inverse relation for correctOption
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String?
  imageUrl            String?
  dataAiHint          String?
  learningPathCourses LearningPathCourse[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  learningPathId String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  order          Int // Order of the course within the learning path
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([learningPathId, courseId])
  @@unique([learningPathId, order])
}

// User Management
enum Role {
  STUDENT
  ADMIN
}

model User {
  id                 String   @id @default(cuid())
  name               String?
  email              String   @unique
  emailVerified      DateTime?
  passwordHash       String
  role               Role     @default(STUDENT)
  image              String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  enrollments        Enrollment[]
  paymentSubmissions PaymentSubmission[]
}

// Enrollments
model Enrollment {
  id           String   @id @default(cuid())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  progress     Int      @default(0) // Percentage completion
  enrolledDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
}

// Videos (for TikTok style feed)
model Video {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  thumbnailUrl  String?
  embedUrl      String // YouTube or TikTok direct video URL or embeddable URL
  dataAiHint    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Payment Related Models
enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id              String                  @id @default(cuid())
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  course          Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId        String
  amount          Float
  currency        String
  screenshotUrl   String // URL to the uploaded screenshot (e.g., Cloudinary, Firebase Storage, or data URI if small and temporary)
  status          PaymentSubmissionStatus @default(PENDING)
  submittedAt     DateTime                @default(now())
  reviewedAt      DateTime?
  adminNotes      String?                 @db.Text
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
}

model PaymentSettings {
  id                     String    @id @default("global") // Ensures only one row for global settings
  bankName               String?
  accountNumber          String?
  accountHolderName      String?
  additionalInstructions String?   @db.Text
  updatedAt              DateTime  @updatedAt
}

// SitePage for dynamic content like About Us, Privacy Policy etc.
model SitePage {
  id        String    @id @default(cuid())
  slug      String    @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Can store HTML string or structured JSON
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
