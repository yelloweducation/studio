// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // Used for migrations, shadows DATABASE_URL in Prisma Studio etc. - Removed as it might not be set in all envs
}

model User {
  id                      String                 @id @default(cuid())
  name                    String?
  email                   String                 @unique
  emailVerified           DateTime?
  passwordHash            String?
  role                    Role                   @default(STUDENT)
  avatarUrl               String?
  bio                     String?
  isActive                Boolean                @default(true)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  enrollments             Enrollment[]
  paymentSubmissions      PaymentSubmission[]
  mbtiQuizResults         MbtiQuizResult[]
  certificates            Certificate[]
  accounts                Account[]
  sessions                Session[]
  authenticators          Authenticator[]
  // Optional: If you want to track courses created by an admin/instructor
  // coursesCreated Course[] @relation("InstructorCourses")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Used by NextAuth.js adapter with WebAuthn
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@index([userId])
}


enum Role {
  STUDENT
  ADMIN
}

model Category {
  id         String   @id @default(cuid())
  name       String   @unique
  imageUrl   String?
  dataAiHint String?  @map("data_ai_hint")
  iconName   String?  @map("icon_name") // For Lucide icon names
  courses    Course[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Course {
  id                       String                 @id @default(cuid())
  title                    String
  description              String                 @db.Text
  instructor               String
  imageUrl                 String?
  dataAiHint               String?                @map("data_ai_hint")
  price                    Float?
  currency                 String?
  isFeatured               Boolean?               @default(false)
  learningObjectives       String[]               @default([])
  targetAudience           String?
  prerequisites            String[]               @default([])
  estimatedTimeToComplete  String?
  categoryId               String
  categoryNameCache        String? // Denormalized for easier querying
  category                 Category               @relation(fields: [categoryId], references: [id], onDelete: Restrict) // Prevent category deletion if courses exist
  modules                  Module[]
  courseQuizzes            CourseQuiz[]           @relation("CourseToCourseQuiz")
  enrollments              Enrollment[]
  paymentSubmissions       PaymentSubmission[]
  certificates             Certificate[]
  learningPathCourses      LearningPathCourse[]   @relation("CourseToLearningPathCourse") // Back-relation to LearningPathCourse
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt

  @@index([categoryId])
  @@index([title])
  @@index([isFeatured])
}

model Module {
  id          String   @id @default(cuid())
  title       String
  order       Int      @default(0)
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String? // e.g., "10min", "1h 30min"
  description String?  @db.Text
  embedUrl    String? // For video embeds (YouTube, Vimeo, etc.)
  imageUrl    String? // For image content or video thumbnail
  order       Int      @default(0)
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([moduleId])
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id            String       @id @default(cuid())
  title         String
  quizType      QuizType     @default(PRACTICE)
  passingScore  Int?         // Percentage, e.g., 70 for 70%
  questions     Question[]
  courseQuizzes CourseQuiz[] @relation("QuizToCourseQuiz") // Relation to the join table
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

// Join table for many-to-many between Course and Quiz
model CourseQuiz {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation("CourseToCourseQuiz", fields: [courseId], references: [id], onDelete: Cascade)
  quizId    String
  quiz      Quiz     @relation("QuizToCourseQuiz", fields: [quizId], references: [id], onDelete: Cascade)
  order     Int      @default(0) // Optional: order of quiz within a course
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, quizId])
  @@index([quizId])
}

model Question {
  id              String   @id @default(cuid())
  text            String   @db.Text
  order           Int      @default(0)
  points          Int?
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[] @relation("QuestionToOptions")
  correctOptionId String?  @unique // ID of the correct Option. Marked unique for 1-to-1
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([quizId])
}

model Option {
  id                 String    @id @default(cuid())
  text               String
  questionId         String
  question           Question  @relation("QuestionToOptions", fields: [questionId], references: [id], onDelete: Cascade)
  correctForQuestion Question? @relation("CorrectOption") // Back-relation for the correct option
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([questionId])
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String? // Lucide icon name
  imageUrl            String?
  dataAiHint          String?              @map("data_ai_hint")
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  learningPathCourses LearningPathCourse[] @relation("LearningPathToLearningPathCourse")
}

// Join table for many-to-many between LearningPath and Course
model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation("LearningPathToLearningPathCourse", fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation("CourseToLearningPathCourse", fields: [courseId], references: [id], onDelete: Cascade)
  order          Int          @default(0) // Order of the course within the learning path
  assignedAt     DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt // Explicit default for db push with existing data

  @@unique([learningPathId, courseId])
  @@index([courseId])
}


model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Float    @default(0) // Percentage, 0-100
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id             String                  @id @default(cuid())
  userId         String
  user           User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount         Float
  currency       String
  screenshotUrl  String?                 @map("screenshot_url")
  status         PaymentSubmissionStatus @default(PENDING)
  submittedAt    DateTime                @default(now()) @map("submitted_at")
  reviewedAt     DateTime?               @map("reviewed_at")
  adminNotes     String?                 @db.Text @map("admin_notes")
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

// Global settings, assuming only one row identified by a fixed ID or unique constraint.
model PaymentSettings {
  id                      String    @id @default("global_settings") // Use a fixed ID for singleton
  bankName                String?   @map("bank_name")
  accountNumber           String?   @map("account_number")
  accountHolderName       String?   @map("account_holder_name")
  additionalInstructions  String?   @db.Text @map("additional_instructions")
  updatedAt               DateTime  @updatedAt
}

// Model for general site pages like "About Us", "Privacy Policy"
model SitePage {
  id        String   @id @default(cuid())
  slug      String   @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Flexible content, can be HTML string or structured JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// For short video reels (TikTok style)
model Video {
  id            String   @id @default(cuid()) // This will be used instead of localStorage if you migrate
  title         String
  description   String   @db.Text
  thumbnailUrl  String?  @map("thumbnail_url")
  embedUrl      String   @map("embed_url") // YouTube, TikTok, Google Drive (viewer URL)
  dataAiHint    String?  @map("data_ai_hint")
  // tags          String[] @default([])
  // views         Int      @default(0)
  // likes         Int      @default(0)
  // uploaderId    String?  // If you want to link to a User model
  // uploader      User?    @relation(fields: [uploaderId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// For tracking MBTI quiz results
model MbtiQuizResult {
  id          String   @id @default(cuid())
  userId      String? // Optional: link to user if logged in
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  mbtiType    String   @map("mbti_type") // e.g., "INFP"
  scoreEI_E   Int      @map("score_ei_e")
  scoreEI_I   Int      @map("score_ei_i")
  scoreSN_S   Int      @map("score_sn_s")
  scoreSN_N   Int      @map("score_sn_n")
  scoreTF_T   Int      @map("score_tf_t")
  scoreTF_F   Int      @map("score_tf_f")
  scoreJP_J   Int      @map("score_jp_j")
  scoreJP_P   Int      @map("score_jp_p")
  submittedAt DateTime @default(now()) @map("submitted_at")

  @@index([userId])
  @@index([mbtiType])
}

model Certificate {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  issueDate      DateTime @default(now()) @map("issue_date")
  certificateUrl String?  @map("certificate_url") // Link to an externally generated PDF, if any
  userName       String   // Denormalized for easier display
  courseTitle    String   // Denormalized for easier display
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, courseId], name: "userCourseCertificateUnique") // Ensure one cert per user per course
  @@index([courseId])
}
