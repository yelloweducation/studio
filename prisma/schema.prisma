datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED") // For Prisma Migrate and introspection. Commented out for Netlify db push.
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String                @id @default(cuid())
  name               String
  email              String                @unique
  passwordHash       String
  role               Role                  @default(STUDENT)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  enrollments        Enrollment[]
  paymentSubmissions PaymentSubmission[]
  // Add other user-related fields if needed, e.g., profilePictureUrl
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String?
  dataAiHint  String? // For AI-assisted image search/generation
  iconName    String?  // Lucide icon name
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id                        String                @id @default(cuid())
  title                     String
  description               String                @db.Text
  instructor                String
  imageUrl                  String?
  dataAiHint                String?
  price                     Float?
  currency                  String?               @default("USD")
  isFeatured                Boolean?              @default(false)
  learningObjectives      Json? // Or String[] if you prefer Prisma array type directly
  targetAudience            String?
  prerequisites             Json? // Or String[]
  estimatedTimeToComplete   String?
  createdAt                 DateTime              @default(now())
  updatedAt                 DateTime              @updatedAt
  modules                   Module[]
  quizzes                   Quiz[]
  categoryId                String
  categoryNameCache         String? // Denormalized for easier display
  category                  Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  learningPathCourses       LearningPathCourse[]
  enrollments               Enrollment[]
  paymentSubmissions        PaymentSubmission[]
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  lessons   Lesson[]
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int      @default(0)
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id           String     @id @default(cuid())
  title        String
  quizType     QuizType   @default(PRACTICE)
  passingScore Int?
  questions    Question[]
  courseId     String
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum QuizType {
  PRACTICE
  GRADED
}

model Question {
  id              String   @id @default(cuid())
  text            String   @db.Text
  order           Int      @default(0)
  points          Int?
  options         Option[]
  correctOption   Option?   @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  correctOptionId String?   @unique // Added @unique and changed onDelete/onUpdate for the relation
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Option {
  id                               String   @id @default(cuid())
  text                             String
  questionId                       String
  question                         Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt
  questionWhereThisIsCorrectOption Question? @relation("CorrectOption") // Back-relation for the correct option
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String? // Lucide icon name
  imageUrl            String?
  dataAiHint          String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  learningPathCourses LearningPathCourse[]
}

model LearningPathCourse {
  id             String       @id @default(cuid()) // Added an ID field
  learningPathId String
  courseId       String
  order          Int          @default(0)
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([learningPathId, courseId])
}

model Video {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  thumbnailUrl  String?
  embedUrl      String // YouTube or TikTok video URL
  dataAiHint    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// For payment processing proof & tracking
model PaymentSubmission {
  id            String                  @id @default(cuid())
  userId        String
  user          User                    @relation(fields: [userId], references: [id])
  courseId      String
  course        Course                  @relation(fields: [courseId], references: [id])
  amount        Float
  currency      String
  screenshotUrl String                  @db.Text // Changed from String to String @db.Text
  status        PaymentSubmissionStatus @default(PENDING)
  submittedAt   DateTime                @default(now())
  reviewedAt    DateTime?
  adminNotes    String?                 @db.Text
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

// For storing global payment settings configured by admin
model PaymentSettings {
  id                     String    @id @default("global") // Only one record with id "global"
  bankName               String?
  accountNumber          String?
  accountHolderName      String?
  additionalInstructions String?   @db.Text
  updatedAt              DateTime  @updatedAt
}

// For tracking student enrollments and progress
model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id])
  progress     Int      @default(0) // Percentage completion
  enrolledDate DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId]) // A user can only enroll in a course once
}

// For dynamic site content (About, Privacy, Terms)
model SitePage {
  id        String   @id @default(cuid())
  slug      String   @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Store HTML or structured JSON
  updatedAt DateTime @updatedAt
}
