// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DATABASE_URL_UNPOOLED") // For Prisma Migrate and introspection. Commented out if not explicitly needed.
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String?
  dataAiHint  String?
  iconName    String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id                      String                 @id @default(cuid())
  title                   String
  description             String                 @db.Text
  categoryNameCache       String? // Denormalized for easy access, linked via categoryId
  instructor              String
  imageUrl                String?
  dataAiHint              String?
  price                   Float?
  currency                String?                @default("USD")
  isFeatured              Boolean?               @default(false)
  learningObjectives      String[]               @default([])
  targetAudience          String?
  prerequisites           String[]               @default([])
  estimatedTimeToComplete String?
  categoryId              String
  category                Category               @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  modules                 Module[]
  quizzes                 Quiz[]
  learningPathCourses     LearningPathCourse[]
  enrollments             Enrollment[]
  paymentSubmissions      PaymentSubmission[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title     String
  order     Int      @default(0)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId, order])
}

model Lesson {
  id          String   @id @default(cuid())
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  title       String
  order       Int      @default(0)
  duration    String?
  description String?  @db.Text
  embedUrl    String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([moduleId, order])
}

model Quiz {
  id           String     @id @default(cuid())
  courseId     String
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title        String
  quizType     QuizType   @default(PRACTICE) // PRACTICE or GRADED
  passingScore Int? // Percentage, e.g., 70 for 70%
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Question {
  id              String    @id @default(cuid())
  quizId          String
  quiz            Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text            String
  order           Int      @default(0)
  points          Int?
  options         Option[]
  correctOption   Option?   @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  correctOptionId String?   @unique // Added @unique and changed onDelete/onUpdate for the relation
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([quizId, order])
}

model Option {
  id         String   @id @default(cuid())
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  // No inverse relation field needed here for "CorrectOption" if Question.correctOptionId is unique
}

enum QuizType {
  PRACTICE
  GRADED
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String? // Lucide icon name
  imageUrl            String?
  dataAiHint          String?
  learningPathCourses LearningPathCourse[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  order          Int // Order of the course within the learning path
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([learningPathId, courseId])
  @@index([learningPathId, order])
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  passwordHash       String // Stores the hashed password
  role               Role                @default(STUDENT)
  enrollments        Enrollment[]
  paymentSubmissions PaymentSubmission[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

enum Role {
  STUDENT
  ADMIN
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId     String
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress     Int      @default(0) // Percentage completion
  enrolledDate DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, courseId])
}

model PaymentSubmission {
  id              String                  @id @default(cuid())
  userId          String
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId        String
  course          Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount          Float
  currency        String
  screenshotUrl   String // URL or data URI of the payment screenshot
  status          PaymentSubmissionStatus @default(PENDING)
  submittedAt     DateTime                @default(now())
  reviewedAt      DateTime?
  adminNotes      String?                 @db.Text
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Video {
  id            String   @id @default(cuid())
  title         String
  description   String   @db.Text
  thumbnailUrl  String?
  embedUrl      String // YouTube or TikTok embed URL
  dataAiHint    String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model PaymentSettings {
  id                     String    @id @default("global") // Singleton record
  bankName               String?
  accountNumber          String?
  accountHolderName      String?
  additionalInstructions String?   @db.Text
  updatedAt              DateTime  @updatedAt
}

model SitePage {
  slug      String   @id @unique // e.g., "about-us", "privacy-policy"
  title     String
  content   Json // Store structured content or HTML as JSON string
  updatedAt DateTime @updatedAt
}
