
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Added for certain Prisma features, especially in serverless
}

model User {
  id                String              @id @default(cuid())
  name              String
  email             String              @unique
  passwordHash      String
  role              Role                @default(STUDENT)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  enrollments       Enrollment[]
  paymentSubmissions PaymentSubmission[]
}

enum Role {
  STUDENT
  ADMIN
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  imageUrl    String?
  dataAiHint  String?
  iconName    String?
  courses     Course[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Course {
  id                       String              @id @default(cuid())
  title                    String
  description              String              @db.Text
  instructor               String
  imageUrl                 String?
  dataAiHint               String?
  price                    Float?
  currency                 String?             @default("USD")
  isFeatured               Boolean?            @default(false)
  learningObjectives       String[]            @default([])
  targetAudience           String?
  prerequisites            String[]            @default([])
  estimatedTimeToComplete  String?
  categoryId               String
  category                 Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryNameCache        String? // Denormalized for easier querying
  modules                  Module[]
  quizzes                  Quiz[]
  learningPathCourses      LearningPathCourse[]
  enrollments              Enrollment[]
  paymentSubmissions       PaymentSubmission[]
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
}

model Module {
  id        String   @id @default(cuid())
  title     String
  order     Int      @default(0)
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@orderBy([order])
}

model Lesson {
  id          String  @id @default(cuid())
  title       String
  duration    String?
  description String? @db.Text
  embedUrl    String?
  imageUrl    String?
  order       Int     @default(0)
  moduleId    String
  module      Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@orderBy([order])
}

enum QuizType {
  PRACTICE
  GRADED
}

model Quiz {
  id           String     @id @default(cuid())
  title        String
  quizType     QuizType   @default(PRACTICE)
  passingScore Int?
  courseId     String
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Question {
  id              String   @id @default(cuid())
  text            String   @db.Text
  order           Int      @default(0)
  points          Int?
  quizId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options         Option[]
  correctOptionId String? // ID of the correct Option
  correctOption   Option?  @relation("CorrectOption", fields: [correctOptionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@orderBy([order])
  @@index([correctOptionId]) // Index for faster lookups if needed
}

model Option {
  id          String     @id @default(cuid())
  text        String
  questionId  String
  question    Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)
  isCorrectIn Question[] @relation("CorrectOption")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model LearningPath {
  id                  String               @id @default(cuid())
  title               String
  description         String               @db.Text
  icon                String?
  imageUrl            String?
  dataAiHint          String?
  learningPathCourses LearningPathCourse[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model LearningPathCourse {
  id             String       @id @default(cuid())
  learningPathId String
  learningPath   LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade) // Prevent deletion of course if in LP
  order          Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([learningPathId, courseId])
  @@orderBy([order])
}

model Enrollment {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId      String
  course        Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress      Int      @default(0) // Percentage 0-100
  enrolledDate  DateTime @default(now())
  completedDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, courseId])
}

enum PaymentSubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model PaymentSubmission {
  id             String                  @id @default(cuid())
  userId         String
  user           User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId       String
  course         Course                  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  amount         Float
  currency       String
  screenshotUrl  String
  status         PaymentSubmissionStatus @default(PENDING)
  submittedAt    DateTime                @default(now())
  reviewedAt     DateTime?
  adminNotes     String?                 @db.Text
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
}

model Video {
  id           String   @id @default(cuid())
  title        String
  description  String   @db.Text
  thumbnailUrl String?
  embedUrl     String // Now required, no more videoUrl
  dataAiHint   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PaymentSettings {
  id                     String   @id @default("global") // Ensure only one row for global settings
  bankName               String?
  accountNumber          String?
  accountHolderName      String?
  additionalInstructions String?  @db.Text
  updatedAt              DateTime @updatedAt
}

// Model for dynamic site page content
model SitePage {
  id        String   @id @default(cuid())
  slug      String   @unique // e.g., "privacy-policy", "about-us"
  title     String
  content   Json // Using Json type for flexible content (e.g., HTML string or structured JSON)
  updatedAt DateTime @updatedAt

  @@index([slug])
}
    